//Version 1
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <cmath>
#include <vector>
using namespace std;

// Function Prototypes
void drawInitialCards(int &card1, int &card2);
int getCardValue(int card, string cardPos);
void showCard(int card);
void showInitialHand(int c1, int c2);
bool playerTurn(int &playerTotal);
int dealerTurn();
string determineResult(int pTot, int dTot, bool pBust, bool dBust);
void printDealerCards(vector<int> dealer);

int main() {
    srand(static_cast<unsigned int>(time(0)));

    const int MIN_ACE = 1;
    const int MAX_ACE = 11;
    const int FACE_CARD_VALUE = 10;
    const char HIT = 'h';
    const char STAND = 's';
    const char PLAY_YES = 'y';
    const char PLAY_NO = 'n';

    int rounds, wins = 0, total = 0;
    char pAgain = PLAY_YES;
    string name;
    ofstream outFile("blackjack_results.txt");

    cout << "Welcome to Blackjack!" << endl;
    cout << "Enter your name: ";
    getline(cin, name);

    while (pAgain == PLAY_YES) {
        wins = 0;
        total = 0;

        do {
            cout << "Enter number of rounds to play: ";
            cin >> rounds;
        } while (rounds <= 0);

        for (int r = 0; r < rounds; r++) {
            cout << "\n=== Round " << (r + 1) << " ===\n";
            total++;

            int p1, p2;
            drawInitialCards(p1, p2);

            cout << "You drew: ";
            showInitialHand(p1, p2);

            int playerTotal = getCardValue(p1, "first") + getCardValue(p2, "second");
            cout << "Your total: " << playerTotal << endl;

            // Dealer draws
            int d1 = rand() % 13 + 1;
            int d2 = rand() % 13 + 1;
            cout << "Dealer shows: ";
            showCard(d1);
            cout << "[Second card hidden]\n";

            bool pBust = false, dBust = false;

            // Player's turn
            char choice;
            int newCard;
            do {
                cout << "Hit or stand? (h/s): ";
                cin >> choice;
                while (choice != HIT && choice != STAND) {
                    cout << "Invalid choice. Enter 'h' or 's': ";
                    cin >> choice;
                }

                if (choice == HIT) {
                    newCard = rand() % 13 + 1;
                    cout << "You drew a ";
                    if (newCard == 1) {
                        int val;
                        cout << "Ace. Choose 1 or 11: ";
                        do {
                            cin >> val;
                            if (val != MIN_ACE && val != MAX_ACE) {
                                cout << "Invalid choice. Enter 1 or 11: ";
                            }
                        } while (val != MIN_ACE && val != MAX_ACE);
                        newCard = val;
                        cout << endl;
                    } else if (newCard > 10) {
                        switch (newCard) {
                            case 11: cout << "Jack" << endl; break;
                            case 12: cout << "Queen" << endl; break;
                            case 13: cout << "King" << endl; break;
                        }
                        newCard = FACE_CARD_VALUE;
                    } else {
                        cout << newCard << endl;
                    }
                    playerTotal += newCard;
                    cout << "New total: " << playerTotal << endl;
                }
            } while (choice == HIT && playerTotal < 21);

            if (playerTotal > 21) pBust = true;

            // Dealer turn
            vector<int> dealer = {d1, d2};
            int dealerTotal = 0;
            for (int &card : dealer) {
                if (card == 1) card = MAX_ACE;
                else if (card > 10) card = FACE_CARD_VALUE;
                dealerTotal += card;
            }

            while (dealerTotal < 17 && dealer.size() < 5) {
                int newD = rand() % 13 + 1;
                if (newD == 1) newD = MAX_ACE;
                else if (newD > 10) newD = FACE_CARD_VALUE;
                dealer.push_back(newD);
                dealerTotal += newD;

                // Adjust Aces if needed
                int aceCount = 0;
                for (int val : dealer) if (val == MAX_ACE) aceCount++;
                while (dealerTotal > 21 && aceCount > 0) {
                    dealerTotal -= 10;
                    aceCount--;
                }
            }

            if (dealerTotal > 21) dBust = true;

            printDealerCards(dealer);
            cout << "Dealer total: " << dealerTotal << endl;

            string result = determineResult(playerTotal, dealerTotal, pBust, dBust);
            cout << result << endl;
            outFile << "Round " << r + 1 << ": " << result << "\n";

            if (result.find("Player wins") != string::npos) wins++;
        }

        float rate = static_cast<float>(wins) / total;
        cout << "\n" << name << ", you won " << wins << " out of " << total << " games.\n";
        cout << fixed << setprecision(2);
        cout << "Win rate: " << rate * 100 << "%\n";
        outFile << name << " won " << wins << " out of " << total << " rounds.\n";
        outFile << "Win rate: " << rate * 100 << "%\n\n";

        cout << "\nPlay another game? (y/n): ";
        cin >> pAgain;
        while (pAgain != PLAY_YES && pAgain != PLAY_NO) {
            cout << "Invalid choice. Enter 'y' or 'n': ";
            cin >> pAgain;
        }
        cin.ignore();
    }

    outFile.close();
    cout << "Thanks for playing, " << name << "! Goodbye.\n";
    return 0;
}

// Draw two random cards
void drawInitialCards(int &card1, int &card2) {
    card1 = rand() % 13 + 1;
    card2 = rand() % 13 + 1;
}

// Determine card value including Ace decision
int getCardValue(int card, string cardPos) {
    if (card == 1) {
        int val;
        cout << "You have an Ace as your " << cardPos << " card. Choose 1 or 11: ";
        do {
            cin >> val;
            if (val != 1 && val != 11)
                cout << "Invalid choice. Enter 1 or 11: ";
        } while (val != 1 && val != 11);
        return val;
    } else if (card > 10) {
        return 10;
    } else return card;
}

// Show a single card by name
void showCard(int card) {
    switch (card) {
        case 1: cout << "Ace\n"; break;
        case 11: cout << "Jack\n"; break;
        case 12: cout << "Queen\n"; break;
        case 13: cout << "King\n"; break;
        default: cout << card << endl;
    }
}

// Display both cards drawn
void showInitialHand(int c1, int c2) {
    showCard(c1);
    cout << " and ";
    showCard(c2);
}

// Determine outcome string
string determineResult(int pTot, int dTot, bool pBust, bool dBust) {
    if (pBust) return "Dealer wins (you busted)!";
    else if (dBust) return "Player wins (dealer busted)!";
    else if (pTot > dTot) return "Player wins!";
    else if (pTot < dTot) return "Dealer wins!";
    else return "It's a tie!";
}

// Print dealer hand
void printDealerCards(vector<int> dealer) {
    cout << "Dealer's cards: ";
    for (int val : dealer) {
        if (val == 11) cout << "Ace ";
        else cout << val << " ";
    }
    cout << endl;
}