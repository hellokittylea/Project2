/*
*Version 2
*/

// System Libraries
#include <iostream>
#include <cstdlib>  // For rand and srand
#include <ctime>    // For time
#include <string>   // For string operations
using namespace std;

// Constants
const int MAX_PLAYERS = 4;
const int MAX_NAME_LEN = 50;
const int START_BALANCE = 100;

// Function Prototypes
int drawCard(); // Draws a random card between 1–13
void welcomeMessage(); // Displays welcome text
void getPlayerNames(string[], int); // Prompts users to enter names
void getNumberOfRounds(int &); // Gets number of rounds to play
bool playerTurn(string, int &, int &); // Handles player's turn and card logic
bool dealerTurn(int &); // Handles dealer's turn logic
void determineWinner(string, int, int, int &, int); // Determines winner and adjusts balance
void printRoundResult(string, int, int); // Prints result of a round (unused)
void placeBets(int[], int[], int); // Prompts players to place bets
void printBalances(const string[], const int[], int); // Displays balances

// Main Function
int main() {
    srand(static_cast<unsigned int>(time(0))); // Seed random number generator

    string names[MAX_PLAYERS]; // Stores player names
    int balances[MAX_PLAYERS]; // Stores each player's balance
    int bets[MAX_PLAYERS];     // Stores each player's bet
    int numPlayers, numRounds; // Number of players and rounds

    welcomeMessage(); // Show welcome message

    // Get number of players (1–4)
    do {
        cout << "Enter number of players (1-" << MAX_PLAYERS << "): ";
        cin >> numPlayers;
    } while (numPlayers < 1 || numPlayers > MAX_PLAYERS);

    getPlayerNames(names, numPlayers); // Input player names
    getNumberOfRounds(numRounds);     // Input number of rounds

    // Initialize all balances to START_BALANCE
    for (int i = 0; i < numPlayers; i++) {
        balances[i] = START_BALANCE;
    }

    // Main game loop
    for (int round = 1; round <= numRounds; round++) {
        cout << "\n=== Round " << round << " ===\n";

        placeBets(bets, balances, numPlayers); // Players place bets

        // Loop through each player
        for (int i = 0; i < numPlayers; i++) {
            int playerTotal = 0; // Player's total card value
            int dealerTotal = 0; // Dealer's total card value

            cout << "\n" << names[i] << "'s turn:\n";

            // Player takes their turn
            bool playerBust = playerTurn(names[i], playerTotal, balances[i]);
            bool dealerBust = false;

            // If player didn't bust, dealer takes their turn
            if (!playerBust) {
                dealerBust = dealerTurn(dealerTotal);
            }

            // Compare hands and update balance
            determineWinner(names[i], playerTotal, dealerTotal, balances[i], bets[i]);
        }

        // Show updated balances
        printBalances(names, balances, numPlayers);
    }

    cout << "\nGame over. Thanks for playing!\n";
    return 0;
}

// Display welcome message
void welcomeMessage() {
    cout << "Welcome to Blackjack!\n";
}

// Prompt for player names
void getPlayerNames(string names[], int numPlayers) {
    for (int i = 0; i < numPlayers; i++) {
        cout << "Enter name for Player " << (i + 1) << ": ";
        cin >> names[i];
    }
}

// Ask how many rounds to play
void getNumberOfRounds(int &rounds) {
    cout << "Enter number of rounds to play: ";
    cin >> rounds;
}

// Generate a random card value from 1 to 13
int drawCard() {
    int card = rand() % 13 + 1;
    return card;
}

// Prompt each player to place a valid bet
void placeBets(int bets[], int balances[], int numPlayers) {
    for (int i = 0; i < numPlayers; i++) {
        do {
            cout << "Player " << (i + 1) << ", enter your bet (Available: $" << balances[i] << "): ";
            cin >> bets[i];
        } while (bets[i] <= 0 || bets[i] > balances[i]);
    }
}

// Handles player's turn, returns true if player busts
bool playerTurn(string name, int &playerTotal, int &balance) {
    int card1 = drawCard();
    int card2 = drawCard();

    // Display initial hand
    cout << "You drew: ";
    if (card1 == 1) cout << "Ace ";
    else if (card1 == 11) cout << "Jack ";
    else if (card1 == 12) cout << "Queen ";
    else if (card1 == 13) cout << "King ";
    else cout << card1 << " ";

    if (card2 == 1) cout << "and Ace\n";
    else if (card2 == 11) cout << "and Jack\n";
    else if (card2 == 12) cout << "and Queen\n";
    else if (card2 == 13) cout << "and King\n";
    else cout << "and " << card2 << "\n";

    // Let player choose Ace value
    int aceValue;
    if (card1 == 1) {
        cout << "You have an Ace as your first card. Choose 1 or 11: ";
        cin >> aceValue;
        while (aceValue != 1 && aceValue != 11) {
            cout << "Invalid choice. Choose 1 or 11: ";
            cin >> aceValue;
        }
        card1 = aceValue;
    }
    if (card2 == 1) {
        cout << "You have an Ace as your second card. Choose 1 or 11: ";
        cin >> aceValue;
        while (aceValue != 1 && aceValue != 11) {
            cout << "Invalid choice. Choose 1 or 11: ";
            cin >> aceValue;
        }
        card2 = aceValue;
    }

    // Convert face cards to value 10
    if (card1 > 10) card1 = 10;
    if (card2 > 10) card2 = 10;

    playerTotal = card1 + card2; // Compute total
    cout << "Your total: " << playerTotal << "\n";

    // Ask player to hit or stand
    char choice;
    do {
        cout << "Hit or stand? (h/s): ";
        cin >> choice;

        if (choice == 'h') {
            int newCard = drawCard();

            // Handle Ace draw
            if (newCard == 1) {
                cout << "You drew an Ace. Choose 1 or 11: ";
                cin >> aceValue;
                while (aceValue != 1 && aceValue != 11) {
                    cout << "Invalid choice. Choose 1 or 11: ";
                    cin >> aceValue;
                }
                newCard = aceValue;
            } else if (newCard > 10) {
                newCard = 10;
                cout << "You drew a face card. Value: 10\n";
            } else {
                cout << "You drew a " << newCard << "\n";
            }

            playerTotal += newCard; // Add card to total
            cout << "New total: " << playerTotal << "\n";
        }
    } while (choice == 'h' && playerTotal < 21); // Loop while hitting and under 21

    // Check for bust
    if (playerTotal > 21) {
        cout << "You busted!\n";
        return true;
    }

    return false;
}

// Simulates dealer turn, returns true if dealer busts
bool dealerTurn(int &dealerTotal) {
    int card1 = drawCard();
    int card2 = drawCard();

    if (card1 > 10) card1 = 10;
    if (card2 > 10) card2 = 10;

    dealerTotal = card1 + card2;

    cout << "Dealer shows: " << card1 << "\n[Second card hidden]\n";

    // Dealer hits until reaching 17+
    while (dealerTotal < 17) {
        int newCard = drawCard();
        if (newCard > 10) newCard = 10;
        dealerTotal += newCard;
    }

    cout << "Dealer total: " << dealerTotal << "\n";

    if (dealerTotal > 21) {
        cout << "Dealer busted!\n";
        return true;
    }

    return false;
}

// Compares player and dealer totals and updates balance
void determineWinner(string name, int playerTotal, int dealerTotal, int &balance, int bet) {
    if (playerTotal > 21) {
        cout << "Dealer wins (you busted)!\n";
        balance -= bet;
    } else if (dealerTotal > 21 || playerTotal > dealerTotal) {
        cout << name << " wins!\n";
        balance += bet;
    } else if (dealerTotal > playerTotal) {
        cout << "Dealer wins.\n";
        balance -= bet;
    } else {
        cout << "It's a tie!\n";
    }
}

// Displays each player's balance
void printBalances(const string names[], const int balances[], int numPlayers) {
    cout << "\nPlayer Balances:\n";
    for (int i = 0; i < numPlayers; i++) {
        cout << names[i] << ": $" << balances[i] << "\n";
    }
}